/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsPrimary_expressionParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=primary_expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=primary_expression*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//primary_expression
		public RuleCall getGreetingsPrimary_expressionParserRuleCall_0() { return cGreetingsPrimary_expressionParserRuleCall_0; }
	}
	public class Primary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDECLARATIONParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//primary_expression:
		//	ID
		//	| STRING
		//	| DECLARATION
		//	| ValAssignment
		//	| expression;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | DECLARATION | ValAssignment | expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//DECLARATION
		public RuleCall getDECLARATIONParserRuleCall_2() { return cDECLARATIONParserRuleCall_2; }
		
		//ValAssignment
		public RuleCall getValAssignmentParserRuleCall_3() { return cValAssignmentParserRuleCall_3; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_4() { return cExpressionParserRuleCall_4; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LITERAL:
		//	StringLiteral | IntLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral | IntLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }
	}
	public class ValAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ValAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeclarationDECLARATIONCrossReference_0_0 = (CrossReference)cDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cDeclarationDECLARATIONIDTerminalRuleCall_0_0_1 = (RuleCall)cDeclarationDECLARATIONCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLITERALParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ValAssignment:
		//	declaration=[DECLARATION] '=' value=LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=[DECLARATION] '=' value=LITERAL
		public Group getGroup() { return cGroup; }
		
		//declaration=[DECLARATION]
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//[DECLARATION]
		public CrossReference getDeclarationDECLARATIONCrossReference_0_0() { return cDeclarationDECLARATIONCrossReference_0_0; }
		
		//ID
		public RuleCall getDeclarationDECLARATIONIDTerminalRuleCall_0_0_1() { return cDeclarationDECLARATIONIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=LITERAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LITERAL
		public RuleCall getValueLITERALParserRuleCall_2_0() { return cValueLITERALParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression");
		private final RuleCall cLiteralExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expression:
		//	LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall() { return cLiteralExpressionParserRuleCall; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LiteralExpression");
		private final RuleCall cIntLiteralExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LiteralExpression:
		//	IntLiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteralExpression
		public RuleCall getIntLiteralExpressionParserRuleCall() { return cIntLiteralExpressionParserRuleCall; }
	}
	public class IntLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IntLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOP_ARITMETICOParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IntLiteralExpression:
		//	INT (OP_ARITMETICO INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT (OP_ARITMETICO INT)*
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//(OP_ARITMETICO INT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OP_ARITMETICO
		public RuleCall getOP_ARITMETICOParserRuleCall_1_0() { return cOP_ARITMETICOParserRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class OP_ARITMETICOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OP_ARITMETICO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OP_ARITMETICO:
		//	'+'
		//	| '-'
		//	| '*'
		//	| '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	public class DECLARATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DECLARATION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTYPEParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIsArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cIsArrayAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DECLARATION:
		//	type=TYPE isArray?='[]'? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TYPE isArray?='[]'? name=ID
		public Group getGroup() { return cGroup; }
		
		//type=TYPE
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TYPE
		public RuleCall getTypeTYPEParserRuleCall_0_0() { return cTypeTYPEParserRuleCall_0_0; }
		
		//isArray?='[]'?
		public Assignment getIsArrayAssignment_1() { return cIsArrayAssignment_1; }
		
		//'[]'
		public Keyword getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0() { return cIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TYPE:
		//	"int" | "string";
		@Override public ParserRule getRule() { return rule; }
		
		//"int" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final Primary_expressionElements pPrimary_expression;
	private final IntLiteralElements pIntLiteral;
	private final StringLiteralElements pStringLiteral;
	private final LITERALElements pLITERAL;
	private final ValAssignmentElements pValAssignment;
	private final ExpressionElements pExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final IntLiteralExpressionElements pIntLiteralExpression;
	private final OP_ARITMETICOElements pOP_ARITMETICO;
	private final DECLARATIONElements pDECLARATION;
	private final TYPEElements pTYPE;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPrimary_expression = new Primary_expressionElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pLITERAL = new LITERALElements();
		this.pValAssignment = new ValAssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pIntLiteralExpression = new IntLiteralExpressionElements();
		this.pOP_ARITMETICO = new OP_ARITMETICOElements();
		this.pDECLARATION = new DECLARATIONElements();
		this.pTYPE = new TYPEElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=primary_expression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//primary_expression:
	//	ID
	//	| STRING
	//	| DECLARATION
	//	| ValAssignment
	//	| expression;
	public Primary_expressionElements getPrimary_expressionAccess() {
		return pPrimary_expression;
	}
	
	public ParserRule getPrimary_expressionRule() {
		return getPrimary_expressionAccess().getRule();
	}
	
	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//LITERAL:
	//	StringLiteral | IntLiteral;
	public LITERALElements getLITERALAccess() {
		return pLITERAL;
	}
	
	public ParserRule getLITERALRule() {
		return getLITERALAccess().getRule();
	}
	
	//ValAssignment:
	//	declaration=[DECLARATION] '=' value=LITERAL;
	public ValAssignmentElements getValAssignmentAccess() {
		return pValAssignment;
	}
	
	public ParserRule getValAssignmentRule() {
		return getValAssignmentAccess().getRule();
	}
	
	//expression:
	//	LiteralExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LiteralExpression:
	//	IntLiteralExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//IntLiteralExpression:
	//	INT (OP_ARITMETICO INT)*;
	public IntLiteralExpressionElements getIntLiteralExpressionAccess() {
		return pIntLiteralExpression;
	}
	
	public ParserRule getIntLiteralExpressionRule() {
		return getIntLiteralExpressionAccess().getRule();
	}
	
	//OP_ARITMETICO:
	//	'+'
	//	| '-'
	//	| '*'
	//	| '/';
	public OP_ARITMETICOElements getOP_ARITMETICOAccess() {
		return pOP_ARITMETICO;
	}
	
	public ParserRule getOP_ARITMETICORule() {
		return getOP_ARITMETICOAccess().getRule();
	}
	
	//DECLARATION:
	//	type=TYPE isArray?='[]'? name=ID;
	public DECLARATIONElements getDECLARATIONAccess() {
		return pDECLARATION;
	}
	
	public ParserRule getDECLARATIONRule() {
		return getDECLARATIONAccess().getRule();
	}
	
	//TYPE:
	//	"int" | "string";
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
