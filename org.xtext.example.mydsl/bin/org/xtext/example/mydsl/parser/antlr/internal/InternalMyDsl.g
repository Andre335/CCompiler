/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsPrimary_expressionParserRuleCall_0());
			}
			lv_greetings_0_0=ruleprimary_expression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.example.mydsl.MyDsl.primary_expression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleprimary_expression
entryRuleprimary_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimary_expressionRule()); }
	iv_ruleprimary_expression=ruleprimary_expression
	{ $current=$iv_ruleprimary_expression.current; }
	EOF;

// Rule primary_expression
ruleprimary_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			newLeafNode(this_ID_0, grammarAccess.getPrimary_expressionAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			newLeafNode(this_STRING_1, grammarAccess.getPrimary_expressionAccess().getSTRINGTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimary_expressionAccess().getDECLARATIONParserRuleCall_2());
		}
		this_DECLARATION_2=ruleDECLARATION
		{
			$current = $this_DECLARATION_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimary_expressionAccess().getValAssignmentParserRuleCall_3());
		}
		this_ValAssignment_3=ruleValAssignment
		{
			$current = $this_ValAssignment_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimary_expressionAccess().getExpressionParserRuleCall_4());
		}
		ruleexpression
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.MyDsl.INT");
			}
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.MyDsl.STRING");
			}
		)
	)
;

// Entry rule entryRuleLITERAL
entryRuleLITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLITERALRule()); }
	iv_ruleLITERAL=ruleLITERAL
	{ $current=$iv_ruleLITERAL.current; }
	EOF;

// Rule LITERAL
ruleLITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLITERALAccess().getStringLiteralParserRuleCall_0());
		}
		this_StringLiteral_0=ruleStringLiteral
		{
			$current = $this_StringLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLITERALAccess().getIntLiteralParserRuleCall_1());
		}
		this_IntLiteral_1=ruleIntLiteral
		{
			$current = $this_IntLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValAssignment
entryRuleValAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValAssignmentRule()); }
	iv_ruleValAssignment=ruleValAssignment
	{ $current=$iv_ruleValAssignment.current; }
	EOF;

// Rule ValAssignment
ruleValAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getValAssignmentAccess().getDeclarationDECLARATIONCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getValAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValAssignmentAccess().getValueLITERALParserRuleCall_2_0());
				}
				lv_value_2_0=ruleLITERAL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.mydsl.MyDsl.LITERAL");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current.getText(); }
	EOF;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getLiteralExpressionParserRuleCall());
	}
	this_LiteralExpression_0=ruleLiteralExpression
	{
		$current.merge(this_LiteralExpression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current.getText(); }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getLiteralExpressionAccess().getIntLiteralExpressionParserRuleCall());
	}
	this_IntLiteralExpression_0=ruleIntLiteralExpression
	{
		$current.merge(this_IntLiteralExpression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIntLiteralExpression
entryRuleIntLiteralExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralExpressionRule()); }
	iv_ruleIntLiteralExpression=ruleIntLiteralExpression
	{ $current=$iv_ruleIntLiteralExpression.current.getText(); }
	EOF;

// Rule IntLiteralExpression
ruleIntLiteralExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIntLiteralExpressionAccess().getINTTerminalRuleCall_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getIntLiteralExpressionAccess().getOP_ARITMETICOParserRuleCall_1_0());
			}
			this_OP_ARITMETICO_1=ruleOP_ARITMETICO
			{
				$current.merge(this_OP_ARITMETICO_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getIntLiteralExpressionAccess().getINTTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleOP_ARITMETICO
entryRuleOP_ARITMETICO returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOP_ARITMETICORule()); }
	iv_ruleOP_ARITMETICO=ruleOP_ARITMETICO
	{ $current=$iv_ruleOP_ARITMETICO.current.getText(); }
	EOF;

// Rule OP_ARITMETICO
ruleOP_ARITMETICO returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARITMETICOAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARITMETICOAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARITMETICOAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOP_ARITMETICOAccess().getSolidusKeyword_3());
		}
	)
;

// Entry rule entryRuleDECLARATION
entryRuleDECLARATION returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDECLARATIONRule()); }
	iv_ruleDECLARATION=ruleDECLARATION
	{ $current=$iv_ruleDECLARATION.current; }
	EOF;

// Rule DECLARATION
ruleDECLARATION returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDECLARATIONAccess().getTypeTYPEParserRuleCall_0_0());
				}
				lv_type_0_0=ruleTYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDECLARATIONRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.example.mydsl.MyDsl.TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_isArray_1_0='[]'
				{
					newLeafNode(lv_isArray_1_0, grammarAccess.getDECLARATIONAccess().getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDECLARATIONRule());
					}
					setWithLastConsumed($current, "isArray", true, "[]");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDECLARATIONAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDECLARATIONRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mydsl.MyDsl.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleTYPE
entryRuleTYPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTYPERule()); }
	iv_ruleTYPE=ruleTYPE
	{ $current=$iv_ruleTYPE.current.getText(); }
	EOF;

// Rule TYPE
ruleTYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPEAccess().getIntKeyword_0());
		}
		    |
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTYPEAccess().getStringKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
