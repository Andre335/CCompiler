/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
		(rule__Model__GreetingsAssignment)*
		{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimary_expression
entryRuleprimary_expression
:
{ before(grammarAccess.getPrimary_expressionRule()); }
	 ruleprimary_expression
{ after(grammarAccess.getPrimary_expressionRule()); } 
	 EOF 
;

// Rule primary_expression
ruleprimary_expression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimary_expressionAccess().getAlternatives()); }
		(rule__Primary_expression__Alternatives)
		{ after(grammarAccess.getPrimary_expressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
		(rule__IntLiteral__ValueAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLITERAL
entryRuleLITERAL
:
{ before(grammarAccess.getLITERALRule()); }
	 ruleLITERAL
{ after(grammarAccess.getLITERALRule()); } 
	 EOF 
;

// Rule LITERAL
ruleLITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLITERALAccess().getAlternatives()); }
		(rule__LITERAL__Alternatives)
		{ after(grammarAccess.getLITERALAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValAssignment
entryRuleValAssignment
:
{ before(grammarAccess.getValAssignmentRule()); }
	 ruleValAssignment
{ after(grammarAccess.getValAssignmentRule()); } 
	 EOF 
;

// Rule ValAssignment
ruleValAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValAssignmentAccess().getGroup()); }
		(rule__ValAssignment__Group__0)
		{ after(grammarAccess.getValAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getLiteralExpressionParserRuleCall()); }
		ruleLiteralExpression
		{ after(grammarAccess.getExpressionAccess().getLiteralExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getIntLiteralExpressionParserRuleCall()); }
		ruleIntLiteralExpression
		{ after(grammarAccess.getLiteralExpressionAccess().getIntLiteralExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteralExpression
entryRuleIntLiteralExpression
:
{ before(grammarAccess.getIntLiteralExpressionRule()); }
	 ruleIntLiteralExpression
{ after(grammarAccess.getIntLiteralExpressionRule()); } 
	 EOF 
;

// Rule IntLiteralExpression
ruleIntLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralExpressionAccess().getGroup()); }
		(rule__IntLiteralExpression__Group__0)
		{ after(grammarAccess.getIntLiteralExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOP_ARITMETICO
entryRuleOP_ARITMETICO
:
{ before(grammarAccess.getOP_ARITMETICORule()); }
	 ruleOP_ARITMETICO
{ after(grammarAccess.getOP_ARITMETICORule()); } 
	 EOF 
;

// Rule OP_ARITMETICO
ruleOP_ARITMETICO 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOP_ARITMETICOAccess().getAlternatives()); }
		(rule__OP_ARITMETICO__Alternatives)
		{ after(grammarAccess.getOP_ARITMETICOAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDECLARATION
entryRuleDECLARATION
:
{ before(grammarAccess.getDECLARATIONRule()); }
	 ruleDECLARATION
{ after(grammarAccess.getDECLARATIONRule()); } 
	 EOF 
;

// Rule DECLARATION
ruleDECLARATION 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDECLARATIONAccess().getGroup()); }
		(rule__DECLARATION__Group__0)
		{ after(grammarAccess.getDECLARATIONAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE
entryRuleTYPE
:
{ before(grammarAccess.getTYPERule()); }
	 ruleTYPE
{ after(grammarAccess.getTYPERule()); } 
	 EOF 
;

// Rule TYPE
ruleTYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPEAccess().getAlternatives()); }
		(rule__TYPE__Alternatives)
		{ after(grammarAccess.getTYPEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary_expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimary_expressionAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getPrimary_expressionAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimary_expressionAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getPrimary_expressionAccess().getSTRINGTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimary_expressionAccess().getDECLARATIONParserRuleCall_2()); }
		ruleDECLARATION
		{ after(grammarAccess.getPrimary_expressionAccess().getDECLARATIONParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimary_expressionAccess().getValAssignmentParserRuleCall_3()); }
		ruleValAssignment
		{ after(grammarAccess.getPrimary_expressionAccess().getValAssignmentParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimary_expressionAccess().getExpressionParserRuleCall_4()); }
		ruleexpression
		{ after(grammarAccess.getPrimary_expressionAccess().getExpressionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LITERAL__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLITERALAccess().getStringLiteralParserRuleCall_0()); }
		ruleStringLiteral
		{ after(grammarAccess.getLITERALAccess().getStringLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLITERALAccess().getIntLiteralParserRuleCall_1()); }
		ruleIntLiteral
		{ after(grammarAccess.getLITERALAccess().getIntLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OP_ARITMETICO__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOP_ARITMETICOAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getOP_ARITMETICOAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOP_ARITMETICOAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getOP_ARITMETICOAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOP_ARITMETICOAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getOP_ARITMETICOAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOP_ARITMETICOAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getOP_ARITMETICOAccess().getSolidusKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPEAccess().getIntKeyword_0()); }
		'int'
		{ after(grammarAccess.getTYPEAccess().getIntKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPEAccess().getStringKeyword_1()); }
		'string'
		{ after(grammarAccess.getTYPEAccess().getStringKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValAssignment__Group__0__Impl
	rule__ValAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValAssignmentAccess().getDeclarationAssignment_0()); }
	(rule__ValAssignment__DeclarationAssignment_0)
	{ after(grammarAccess.getValAssignmentAccess().getDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValAssignment__Group__1__Impl
	rule__ValAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getValAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValAssignmentAccess().getValueAssignment_2()); }
	(rule__ValAssignment__ValueAssignment_2)
	{ after(grammarAccess.getValAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteralExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteralExpression__Group__0__Impl
	rule__IntLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralExpressionAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getIntLiteralExpressionAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteralExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralExpressionAccess().getGroup_1()); }
	(rule__IntLiteralExpression__Group_1__0)*
	{ after(grammarAccess.getIntLiteralExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteralExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteralExpression__Group_1__0__Impl
	rule__IntLiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralExpressionAccess().getOP_ARITMETICOParserRuleCall_1_0()); }
	ruleOP_ARITMETICO
	{ after(grammarAccess.getIntLiteralExpressionAccess().getOP_ARITMETICOParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntLiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteralExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntLiteralExpressionAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getIntLiteralExpressionAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DECLARATION__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DECLARATION__Group__0__Impl
	rule__DECLARATION__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDECLARATIONAccess().getTypeAssignment_0()); }
	(rule__DECLARATION__TypeAssignment_0)
	{ after(grammarAccess.getDECLARATIONAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DECLARATION__Group__1__Impl
	rule__DECLARATION__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDECLARATIONAccess().getIsArrayAssignment_1()); }
	(rule__DECLARATION__IsArrayAssignment_1)?
	{ after(grammarAccess.getDECLARATIONAccess().getIsArrayAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DECLARATION__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDECLARATIONAccess().getNameAssignment_2()); }
	(rule__DECLARATION__NameAssignment_2)
	{ after(grammarAccess.getDECLARATIONAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GreetingsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsPrimary_expressionParserRuleCall_0()); }
		ruleprimary_expression
		{ after(grammarAccess.getModelAccess().getGreetingsPrimary_expressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__DeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAssignmentAccess().getDeclarationDECLARATIONCrossReference_0_0()); }
		(
			{ before(grammarAccess.getValAssignmentAccess().getDeclarationDECLARATIONIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getValAssignmentAccess().getDeclarationDECLARATIONIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getValAssignmentAccess().getDeclarationDECLARATIONCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValAssignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAssignmentAccess().getValueLITERALParserRuleCall_2_0()); }
		ruleLITERAL
		{ after(grammarAccess.getValAssignmentAccess().getValueLITERALParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDECLARATIONAccess().getTypeTYPEParserRuleCall_0_0()); }
		ruleTYPE
		{ after(grammarAccess.getDECLARATIONAccess().getTypeTYPEParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__IsArrayAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDECLARATIONAccess().getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
		(
			{ before(grammarAccess.getDECLARATIONAccess().getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
			'[]'
			{ after(grammarAccess.getDECLARATIONAccess().getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
		)
		{ after(grammarAccess.getDECLARATIONAccess().getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECLARATION__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDECLARATIONAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDECLARATIONAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
