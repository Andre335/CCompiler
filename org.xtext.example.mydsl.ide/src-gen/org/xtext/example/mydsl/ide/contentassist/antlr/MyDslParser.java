/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimary_expressionAccess().getAlternatives(), "rule__Primary_expression__Alternatives");
					put(grammarAccess.getLITERALAccess().getAlternatives(), "rule__LITERAL__Alternatives");
					put(grammarAccess.getOP_ARITMETICOAccess().getAlternatives(), "rule__OP_ARITMETICO__Alternatives");
					put(grammarAccess.getTYPEAccess().getAlternatives(), "rule__TYPE__Alternatives");
					put(grammarAccess.getValAssignmentAccess().getGroup(), "rule__ValAssignment__Group__0");
					put(grammarAccess.getIntLiteralExpressionAccess().getGroup(), "rule__IntLiteralExpression__Group__0");
					put(grammarAccess.getIntLiteralExpressionAccess().getGroup_1(), "rule__IntLiteralExpression__Group_1__0");
					put(grammarAccess.getDECLARATIONAccess().getGroup(), "rule__DECLARATION__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getValAssignmentAccess().getDeclarationAssignment_0(), "rule__ValAssignment__DeclarationAssignment_0");
					put(grammarAccess.getValAssignmentAccess().getValueAssignment_2(), "rule__ValAssignment__ValueAssignment_2");
					put(grammarAccess.getDECLARATIONAccess().getTypeAssignment_0(), "rule__DECLARATION__TypeAssignment_0");
					put(grammarAccess.getDECLARATIONAccess().getIsArrayAssignment_1(), "rule__DECLARATION__IsArrayAssignment_1");
					put(grammarAccess.getDECLARATIONAccess().getNameAssignment_2(), "rule__DECLARATION__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
